

=========================
>>> .\urls.py
=========================
from django.urls import path
from .views import *

#from django.conf.urls.static import static

urlpatterns = [
    path('', dashboard_view, name='MyManager'),
    path('dashboard/', dashboard_view, name='dashboard'),
    path('api/courses_menu/', menu_courses_api, name='courses_menu_api'),
    path('api/random_keypoint/', random_keypoint_api, name='random_keypoint_api'),

]

from .views.filter_api import (
    filter_options_api,
    chapters_by_course_api,
    save_filter_settings_api,
)

urlpatterns += [
    path("api/filter_options/", filter_options_api),
    path("api/chapters_by_course/", chapters_by_course_api),
    path("api/save_filters/", save_filter_settings_api),
]

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\views\filter_api.py
=========================
# views/filter_api.py (or inside randomized_keypoints_views.py)

import sqlite3
import json
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings

DB_PATH = settings.DATABASES['default']['NAME']

# âœ… Get available courses
@csrf_exempt
def filter_options_api(request):
    user_id = request.user.id if request.user.is_authenticated else 0
    saved_filters = {
        "selected_courses": [],
        "selected_chapters": [],
        "weight_mode": "early"
    }

    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT name FROM courses ORDER BY name ASC")
        courses = [row[0] for row in cursor.fetchall()]

        # Load saved filter if exists
        cursor.execute("SELECT selected_courses, selected_chapters, weight_mode FROM filter_settings WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row:
            saved_filters = {
                "selected_courses": json.loads(row[0]),
                "selected_chapters": json.loads(row[1]),
                "weight_mode": row[2]
            }

    return JsonResponse({"courses": courses, "saved_filters": saved_filters})

# âœ… Get chapters grouped by course name
@csrf_exempt
def chapters_by_course_api(request):
    selected = request.GET.getlist("courses[]")
    result = {}

    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        for course_name in selected:
            cursor.execute("""
                SELECT ch.chapter_number
                FROM chapter ch
                JOIN courses c ON ch.course_id = c.id
                WHERE c.name = ?
                ORDER BY ch.chapter_number
            """, (course_name,))
            result[course_name] = [row[0] for row in cursor.fetchall()]

    return JsonResponse({"chapters_by_course": result})

# âœ… Save filter state
@csrf_exempt
def save_filter_settings_api(request):
    if request.method == "POST":
        user_id = request.user.id if request.user.is_authenticated else 0  # 0 = anonymous
        selected_courses = request.POST.getlist("selected_courses[]")
        selected_chapters = request.POST.getlist("selected_chapters[]")
        weight_mode = request.POST.get("weight_mode", "early")

        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM filter_settings WHERE user_id = ?", (user_id,))
            exists = cursor.fetchone()

            if exists:
                cursor.execute("""
                    UPDATE filter_settings
                    SET selected_courses = ?, selected_chapters = ?, weight_mode = ?
                    WHERE user_id = ?
                """, (json.dumps(selected_courses), json.dumps(selected_chapters), weight_mode, user_id))
            else:
                cursor.execute("""
                    INSERT INTO filter_settings (user_id, selected_courses, selected_chapters, weight_mode)
                    VALUES (?, ?, ?, ?)
                """, (user_id, json.dumps(selected_courses), json.dumps(selected_chapters), weight_mode))

            conn.commit()

        return JsonResponse({"status": "saved"})

    return JsonResponse({"error": "invalid request"}, status=400)

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\views\randomized_keypoints_views.py
=========================
import sqlite3
import random
from django.shortcuts import render, redirect
from django.conf import settings
from django.core.cache import cache
from django.views.decorators.csrf import csrf_exempt
import json

DB_PATH = settings.DATABASES['default']['NAME']

def get_keypoints_in_chapter(chapter_number):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM chapter WHERE chapter_number = ?', (chapter_number,))
        chapter_row = cursor.fetchone()
        if not chapter_row:
            return []
        chapter_id = chapter_row[0]
        cursor.execute('''
            SELECT id, chapter_id, number_of_correct
            FROM keypoint
            WHERE chapter_id = ?
            ORDER BY id ASC
        ''', (chapter_id,))
        keypoints = cursor.fetchall()
    return keypoints, chapter_id

# âœ… Used by dashboard and random view
def get_random_key_point_context(selected_chapters=None, weight_mode="early", course_chapter_map=None):
    all_keypoints = []

    if not course_chapter_map:
        return None  # no valid data

    num_courses = len(course_chapter_map)
    if num_courses == 0:
        return None

    for course_name, chapter_list in course_chapter_map.items():
        total_chapters = len(chapter_list)
        if total_chapters == 0:
            continue

        course_weight = 1 / num_courses

        for idx, chapter_number in enumerate(chapter_list):
            keypoints, chapter_id = get_keypoints_in_chapter(chapter_number)
            num_keypoints = len(keypoints)
            if num_keypoints == 0:
                continue

            # Chapter position weight
            if weight_mode == "early":
                chapter_weight = 2 ** (total_chapters - idx - 1)
            elif weight_mode == "late":
                chapter_weight = 2 ** idx
            elif weight_mode == "middle":
                mid = (total_chapters - 1) / 2
                dist = abs(idx - mid)
                chapter_weight = 1 / (dist + 1)
            elif weight_mode == "edges":
                mid = (total_chapters - 1) / 2
                dist = abs(idx - mid)
                chapter_weight = dist + 1
            else:
                chapter_weight = 1

            base_weight = (course_weight * chapter_weight) / num_keypoints

            for kp_id, kp_chapter_id, correct_count in keypoints:
                adj_weight = base_weight / (2 ** correct_count)
                all_keypoints.append({
                    "chapter_number": chapter_number,
                    "chapter_id": kp_chapter_id,
                    "key_point_id": kp_id,
                    "adjusted_weight": adj_weight
                })

    if not all_keypoints:
        return None

    weights = [kp['adjusted_weight'] for kp in all_keypoints]
    return random.choices(all_keypoints, weights=weights, k=1)[0]



# Shared rendering logic (used by dashboard)
def render_key_point(request, chapter_number, key_point_id, chapter_id=None,
                     is_random_across_chapters=False, is_random_in_chapter=False):
    #print("ðŸ“Œ Rendering KeyPoint ID:", key_point_id)

    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT header, body, number_of_correct, chapter_id
            FROM keypoint
            WHERE id = ?
        ''', (key_point_id,))
        row = cursor.fetchone()

    if not row:
        return render(request, "error.html", {"message": "Key point not found."})

    header, body, correct_count, db_chapter_id = row
    show_answer = request.session.pop('show_answer', False)

    if chapter_id is None:
        chapter_id = db_chapter_id

    if request.method == "POST":
        key_point_id = int(request.POST.get("key_point_number", key_point_id))
        chapter_number = int(request.POST.get("chapter_number", chapter_number))

        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            if "answer_correct" in request.POST:
                cursor.execute('''
                    UPDATE keypoint
                    SET number_of_correct = number_of_correct + 1
                    WHERE id = ?
                ''', (key_point_id,))
                conn.commit()

                if is_random_across_chapters:
                    return redirect('random_file')
                else:
                    return redirect(request.path)

            elif "answer_incorrect" in request.POST and is_random_across_chapters:
                return redirect('random_file')

            elif "show_answer" in request.POST:
                show_answer = True

    return {
        "chapter_number": chapter_number,
        "key_point_number": key_point_id,
        "question_text": header,
        "content": body if body else "<p>No content available</p>",
        "correct_count": correct_count,
        "show_answer": show_answer,
        "is_random_across_chapters": is_random_across_chapters,
        "is_random_in_chapter": is_random_in_chapter,
    }

from django.http import JsonResponse
from django.template.loader import render_to_string
from django.views.decorators.csrf import csrf_exempt
import sqlite3, json
from django.conf import settings


@csrf_exempt
def random_keypoint_api(request):
    if request.method == "POST":
        key_point_id = int(request.POST.get("key_point_number", 0))
        answer_type = request.POST.get("answer")

        # Optional: update correctness count
        if answer_type == "correct" and key_point_id:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE keypoint
                    SET number_of_correct = number_of_correct + 1
                    WHERE id = ?
                ''', (key_point_id,))
                conn.commit()

        # Gather filters from POST
        weight_mode = request.POST.get("weight_mode", "early")
        selected_chapters = request.POST.getlist("selected_chapters[]")
        selected_chapters = list(map(int, selected_chapters))

        # Get random keypoint context using your logic
        selected = get_random_key_point_context(
            selected_chapters=selected_chapters,
            weight_mode=weight_mode
        )

        if not selected:
            return JsonResponse({'html': '<p>No key points found.</p>'})

        context = render_key_point(
            request,
            selected['chapter_number'],
            selected['key_point_id'],
            chapter_id=selected['chapter_id'],
            is_random_across_chapters=True
        )

        if hasattr(context, 'status_code'):
            return JsonResponse({'html': '<p>Error rendering key point.</p>'})

        html = render_to_string("MyManager/components/keypoint_display.html", context, request=request)
        return JsonResponse({'html': html})

    return JsonResponse({"error": "Invalid method"}, status=405)


=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\views\__init__.py
=========================
import sqlite3
from django.conf import settings
from django.shortcuts import render as django_render
from . import *

from django.http import JsonResponse
from django.db import connection

from .randomized_keypoints_views import *  # âœ… added

DB_PATH = settings.DATABASES['default']['NAME']

# âœ… Keeps your wrapper
def render(request, html_file, context=None):
    return django_render(request, 'MyManager/' + html_file, context=context)


# âœ… Updated dashboard view, adds keypoint logic
import sqlite3
import json
from django.conf import settings
from .randomized_keypoints_views import get_random_key_point_context, render_key_point
from django.shortcuts import render as django_render

DB_PATH = settings.DATABASES['default']['NAME']

def dashboard_view(request):
    user_id = request.user.id if request.user.is_authenticated else 0

    # Load filters from DB
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT selected_chapters, weight_mode FROM filter_settings WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()

    if row:
        selected_chapters = json.loads(row[0])
        weight_mode = row[1]
    else:
        selected_chapters = []
        weight_mode = "early"

    # Fetch a random keypoint based on filters
    selected = get_random_key_point_context(selected_chapters, weight_mode)

    if not selected:
        return django_render(request, "MyManager/dashboard.html", {
            "key_point_error": "No key points found."
        })

    keypoint_context = render_key_point(
        request,
        selected['chapter_number'],
        selected['key_point_id'],
        chapter_id=selected['chapter_id'],
        is_random_across_chapters=True
    )

    # If a redirect or error occurred
    if hasattr(keypoint_context, 'status_code'):
        return keypoint_context

    return django_render(request, "MyManager/dashboard.html", keypoint_context)



# âœ… untouched
def menu_courses_api(request):
    with connection.cursor() as cursor:
        cursor.execute("SELECT name, url FROM courses")
        rows = cursor.fetchall()

    data = [{"title": row[0], "url": row[1]} for row in rows]
    return JsonResponse(data, safe=False)
    
import json
import sqlite3

def get_user_filter_settings(user_id):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT selected_courses, selected_chapters, weight_mode FROM filter_settings WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()

    if row:
        return {
            "selected_courses": json.loads(row[0]) if row[0] else [],
            "selected_chapters": json.loads(row[1]) if row[1] else [],
            "weight_mode": row[2] or "early"
        }
    return {}

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\templates\MyManager\base.html
=========================
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Dynamic Sidebar{% endblock %}</title>
    <link rel="stylesheet" href="{% static 'MyManager/styles.css' %}">
</head>
<body>

<div class="container">
    <!-- Sidebar -->
    <div class="sidebar">
        <ul id="dynamic-menu">
            <li class="accordion-item">
                <div class="accordion-title" onclick="toggleAccordion()">
                    School Courses <span style="float: right;">â–¼</span>
                </div>
                <ul id="accordion-submenu" style="display: none; padding-left: 10px;">
                    <!-- Submenu items injected by JS -->
                </ul>
            </li>
            <li><a href="#">Projects</a></li>
            <li><a href="#">Life</a></li>
            <li><a href="#">Ideas</a></li>
        </ul>
    </div>

    <!-- Main content structure -->
    <div class="content-wrapper">
        <div class="fixed-background"></div>

        <div class="content">
            {% block content %}
            <!-- Dynamic content appears here -->
            {% endblock %}
        </div>
    </div>
</div>

<script src="{% static 'MyManager/menu.js' %}"></script>
{% block extra_scripts %}{% endblock %}
</body>
</html>

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\templates\MyManager\dashboard.html
=========================
{% extends "MyManager/base.html" %}
{% load static %}

{% block title %}Dashboard{% endblock %}

{% block content %}
<h1>ðŸŽ² Random Content</h1>

<!-- ðŸ“¦ Button to open the filter popup -->
<button onclick="filterManager.show()">âš™ï¸ Filter Settings</button>

{% include "MyManager/components/filter_popup.html" %}

<div class="dashboard-content-box">
    <!-- Random keypoint will load here via AJAX -->
</div>
{% endblock %}

{% block extra_scripts %}
<script src="{% static 'MyManager/filter.js' %}"></script>
<script src="{% static 'MyManager/keypoint.js' %}"></script>
<script>
	console.log("ðŸ‘€ inline test script triggered");
</script>
{% endblock %}

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\templates\MyManager\components\filter_popup.html
=========================
<!-- templates/MyManager/components/filter_popup.html -->
<div id="filterPopup"style="display: none;">
  <div class="filter-popup-inner">
    <h2>ðŸŽ›ï¸ Filter Keypoint Settings</h2>

    <!-- Course Selector -->
    <div>
      <h3>Select Course(s)</h3>
      <div id="courseCheckboxes">
        <!-- JS will populate with checkbox list -->
      </div>
    </div>

    <!-- Weight Mode Dropdown -->
    <div style="margin-top: 20px;">
      <h3>Weight Distribution</h3>
      <select id="weightMode">
        <option value="early">Heavier toward earlier chapters</option>
        <option value="late">Heavier toward later chapters</option>
        <option value="middle">Heavier in the middle</option>
        <option value="edges">Heavier at edges</option>
      </select>
    </div>

    <!-- Dynamic Chapter Lists -->
    <div id="chapterContainer" class="chapter-grid">
      <!-- JS will populate each course's chapter list here -->
    </div>

    <!-- Apply Button -->
    <div style="margin-top: 20px;">
      <button onclick="filterManager.applyFilters()">âœ… Apply Filters</button>
    </div>
  </div>
</div>

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\templates\MyManager\components\keypoint_display.html
=========================
<div class="keypoint-box">
    <h2>ðŸ“˜ Chapter {{ chapter_number }} â€” Key Point {{ key_point_number }}</h2>

    <div class="keypoint-header">
        <strong>ðŸ§  {{ question_text }}</strong>
    </div>

    <div class="keypoint-body">
        {{ content|safe }}
    </div>

    <div class="keypoint-actions">
        <button class="answer-button" data-answer="correct" data-kp="{{ key_point_number }}">âœ… Correct</button>
        <button class="answer-button" data-answer="incorrect" data-kp="{{ key_point_number }}">âŒ Incorrect</button>
    </div>

    <div class="keypoint-meta">
        <p>âœ… Correct count: {{ correct_count }}</p>
    </div>
</div>

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\static\MyManager\dashboard.js
=========================


//function getCSRFToken() {
    //const cookies = document.cookie.split(';');
    //for (let cookie of cookies) {
        //const [name, value] = cookie.trim().split('=');
       // if (name === 'csrftoken') return value;
    //}
//}

//document.addEventListener("click", function (e) {
    ///if (e.target.classList.contains("answer-button")) {
        //const type = e.target.getAttribute("data-answer");
        //const kpId = parseInt(e.target.getAttribute("data-kp"));
        //submitAnswer(type, kpId);
    //}
//});

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\static\MyManager\filter.js
=========================
console.log("ðŸ“¦ filter.js loaded");


const filterManager = {
    filters: {
        selected_courses: [],
        selected_chapters: [],
        weight_mode: "early"
    },

    init() {
		fetch("/MyManager/api/filter_options/")
			.then(response => response.json())
			.then(data => {
				const { courses, saved_filters } = data;

				this.filters = {
					selected_courses: saved_filters.selected_courses || [],
					selected_chapters: (saved_filters.selected_chapters || []).map(Number),
					weight_mode: saved_filters.weight_mode || "early"
				};

				this.renderCourses(courses);

				const hasValidFilters =
					this.filters.selected_courses.length > 0 &&
					this.filters.selected_chapters.length > 0;

				// â³ Wait until submit handler is registered
				if (hasValidFilters) {
					console.log("âœ… Filters found, waiting to apply...");
					this._deferredApply = true; // flag to apply once ready
				} else {
					this.show();
				}
			})
			.catch((err) => {
				console.warn("âš ï¸ Filter load failed:", err);
				this.show();
			});
	},


    renderCourses(courses) {
		const container = document.getElementById("courseCheckboxes");
		container.innerHTML = "";

		courses.forEach(course => {
			const isChecked = this.filters.selected_courses.includes(course);
			const label = document.createElement("label");
			label.innerHTML = `<input type="checkbox" value="${course}" ${isChecked ? 'checked' : ''} onchange="filterManager.loadChapters()"> ${course}`;
			container.appendChild(label);
			container.appendChild(document.createElement("br"));
		});

		// âœ… Now load chapters based on selected courses
		this.loadChapters();
	},

    loadChapters() {
		const selectedCourses = Array.from(document.querySelectorAll("#courseCheckboxes input:checked"))
			.map(cb => cb.value);

		this.filters.selected_courses = selectedCourses;

		const params = new URLSearchParams();
		selectedCourses.forEach(c => params.append("courses[]", c));

		fetch(`/MyManager/api/chapters_by_course/?${params.toString()}`)
			.then(response => response.json())
			.then(data => {
				const container = document.getElementById("chapterContainer");
				container.innerHTML = "";

				const chapterGroups = data.chapters_by_course;
				const groupWrapper = document.createElement("div");
				groupWrapper.style.display = "flex";
				groupWrapper.style.gap = "30px";

				for (const course in chapterGroups) {
					const box = document.createElement("div");
					box.classList.add("chapter-section");

					const title = document.createElement("h4");
					title.textContent = course;
					box.appendChild(title);

					chapterGroups[course].forEach(ch => {
						const isChecked = this.filters.selected_chapters.includes(parseInt(ch));
						const label = document.createElement("label");
						label.innerHTML = `<input type="checkbox" value="${ch}" ${isChecked ? 'checked' : ''}> Chapter ${ch}`;
						box.appendChild(label);
						box.appendChild(document.createElement("br"));
					});


					groupWrapper.appendChild(box);
				}

				container.appendChild(groupWrapper);

				// âœ… Restore weight mode selection (only once chapters are rendered)
				document.getElementById("weightMode").value = this.filters.weight_mode || "early";
			});
	},


    saveFilters() {
        const selectedChapters = Array.from(document.querySelectorAll("#chapterContainer input:checked"))
            .map(cb => parseInt(cb.value));
        const selectedMode = document.getElementById("weightMode").value;

        this.filters.selected_chapters = selectedChapters;
        this.filters.weight_mode = selectedMode;

        const formData = new FormData();
        this.filters.selected_courses.forEach(c => formData.append("selected_courses[]", c));
        this.filters.selected_chapters.forEach(ch => formData.append("selected_chapters[]", ch));
        formData.append("weight_mode", selectedMode);

        fetch("/MyManager/api/save_filters/", {
            method: "POST",
            headers: { 'X-CSRFToken': getCSRFToken() },
            body: formData
        });
    },

    applyFilters(skipSave = false) {
		console.log("Applying filters...")
        if (!skipSave) this.saveFilters();
        this.hide();
		if (typeof submitAnswer === "function") {
			console.log("ðŸ“£ Calling submitAnswer from filterManager");
			this._submitAnswer("filter_applied", 0);  // âœ… âœ… âœ… CORRECTED LINE
		} else {
			console.warn("â— submitAnswer not available during filter apply");
		}


    },

    show() {
		console.warn("ðŸ“£ filterManager.show() CALLED!");
		document.getElementById("filterPopup").style.display = "block";
	},


    hide() {
        document.getElementById("filterPopup").style.display = "none";
    },
	
	setSubmitHandler(fn) {
		this._submitAnswer = fn;

		if (this._deferredApply) {
			console.log("ðŸš€ submitAnswer registered â€” applying filters now...");
			this.applyFilters(true);  // âœ… Only now that it's safe
			this._deferredApply = false;
		}
	},

};

// CSRF token helper
function getCSRFToken() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
        const [name, value] = cookie.trim().split('=');
        if (name === 'csrftoken') return value;
    }
    return '';
}

// âœ… Initialize on page load
document.addEventListener("DOMContentLoaded", () => {
    if (typeof filterManager !== "undefined") {
        filterManager.init();
    }
});

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\static\MyManager\keypoint.js
=========================
console.log("ðŸ“Œ keypoint.js loaded");


function getCSRFToken() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
        const [name, value] = cookie.trim().split('=');
        if (name === 'csrftoken') return value;
    }
    return '';
}

function submitAnswer(answerType, keyPointId) {
	console.log("ðŸŽ¯ Inside submitAnswer()", answerType, keyPointId);  // âœ… debug here
	
	
	const formData = new FormData();
	formData.append("key_point_number", keyPointId);
	formData.append("answer", answerType);

	formData.append("weight_mode", filterManager.filters.weight_mode);
	filterManager.filters.selected_chapters.forEach(ch => {
		formData.append("selected_chapters[]", ch);
	});

	fetch("/MyManager/api/random_keypoint/", {
		method: "POST",
		headers: { "X-CSRFToken": getCSRFToken() },
		body: formData
	})
	.then(response => response.json())
	.then(data => {
		console.log("ðŸ§± Keypoint HTML received:", data.html);

		const box = document.querySelector(".dashboard-content-box");
		if (box) {
			box.innerHTML = data.html;
			console.log("âœ… Injected into .dashboard-content-box");
		} else {
			console.warn("â— .dashboard-content-box not found in DOM");
		}
	});

	
	
}

// âœ… Register the function with the filter manager
if (typeof filterManager !== "undefined") {
	filterManager.setSubmitHandler(submitAnswer);
}


=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\static\MyManager\menu.js
=========================
console.log("menu.js loaded");

// âœ… Fetch only the courses and load into the accordion submenu
function loadCoursesIntoAccordion() {
    console.log("Fetching courses...");
    fetch('/MyManager/api/courses_menu/')  // <-- Adjust this if your courses API is different
        .then(response => response.json())
        .then(data => {
            console.log("Courses data:", data);
            const submenu = document.getElementById('accordion-submenu');
            submenu.innerHTML = '';
            data.forEach(course => {
                submenu.innerHTML += `<li><a href="${course.url}">${course.title}</a></li>`;
            });
        })
        .catch(error => console.error('Error loading courses:', error));
}

// âœ… Toggle accordion open/close
function toggleAccordion() {
    const submenu = document.getElementById('accordion-submenu');
    submenu.style.display = submenu.style.display === 'none' ? 'block' : 'none';
}

document.addEventListener('DOMContentLoaded', () => {
    loadCoursesIntoAccordion();              // âœ… Initial load of courses
    setInterval(loadCoursesIntoAccordion, 5000);  // Optional: Refresh every 5 sec
});

=========================
>>> C:\Users\andre\My Drive (andreip@my.yorku.ca)\pythonanywhere\MyManager\static\MyManager\styles.css
=========================
.sidebar {
    width: 80px;
    background-color: #2c3e50;
    color: #ecf0f1;
    padding: 20px;
    height: 100vh;  /* Full height */
    position: fixed;
    overflow-y: auto;
}

.sidebar ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.sidebar ul li {
    margin-bottom: 15px;
}

.sidebar ul li a {
    color: #ecf0f1;
    text-decoration: none;
    display: block;
}

.sidebar ul li a:hover,
.accordion-title:hover {
    background-color: #34495e;
}

/* âœ… Accordion title styled like normal menu items */
.accordion-title {
    color: #ecf0f1;
    text-decoration: none;
    display: block;
    cursor: pointer;
}

/* âœ… Ensure accordion submenu spacing looks clean */
#accordion-submenu {
    list-style-type: none;
    padding-left: 10px;
    margin: 0;
}

#accordion-submenu li {
    margin-bottom: 10px;
}

#accordion-submenu li a {
    color: #ecf0f1;
    text-decoration: none;
    display: block;
}

#accordion-submenu li a:hover {
    background-color: #34495e;
    padding-left: 10px;
    transition: 0.3s;
}

/* âœ… General layout */
.container {
    display: flex;
    min-height: 100vh; /* Full height layout */
}

.content-wrapper {
    flex-grow: 1;
    position: relative;  /* Needed for the fixed background layering */
    margin-left: 120px;  /* Account for sidebar width + padding */
}

.fixed-background {
    position: fixed;
    padding: 20px;
    height: 100vh;
    background-color: #f4f4f4;  /* âœ… Background stays fixed */
    z-index: -1;  /* âœ… Stays behind the content */
    left: 120px;           /* âœ… Starts right after the sidebar */
    right: 10px;           /* âœ… Leaves 10px gap before the right edge */
    box-sizing: border-box; /* âœ… Makes sure padding doesn't break layout */
}

.content {
    padding: 20px;
    position: relative;
    z-index: 1;
}

.dashboard-content-box {
    background-color: #ffffff;
    border: 1px solid #ccc;
    border-radius: 10px;
    padding: 25px;
    margin-top: 20px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}
